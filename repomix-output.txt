This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-20T22:16:17.168Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    components/
      file-picker/
        breadcrumb-navigation.tsx
        file-explorer.tsx
        file-item.tsx
        file-list.tsx
        file-picker.tsx
      shared/
        error-boundary.tsx
        error-message.tsx
        loading-skeleton.tsx
    hooks/
      api/
        use-auth.ts
        use-connection.ts
        use-knowledge-base.ts
        use-resources.ts
      ui/
        use-file-selection.ts
        use-keyboard-selection.ts
        use-navigation.ts
    lib/
      api/
        client.ts
        endpoint.ts
      types/
        api.ts
        file.ts
    globals.css
    layout.tsx
    page.tsx
  components/
    ui/
      button.tsx
      card.tsx
      checkbox.tsx
  lib/
    utils.ts
.gitignore
components.json
DESIGNDOC.md
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/components/file-picker/breadcrumb-navigation.tsx
================
import { ChevronRight, Home } from "lucide-react";
import { Button } from "@/components/ui/button";

interface BreadcrumbNavigationProps {
  currentPath: string;
  onNavigate: (path: string) => void;
}

export function BreadcrumbNavigation({
  currentPath,
  onNavigate,
}: BreadcrumbNavigationProps) {
  const segments = currentPath.split("/").filter(Boolean);

  return (
    <div className="flex items-center gap-1 px-2 py-1 overflow-x-auto">
      <Button
        variant="ghost"
        size="sm"
        className="h-8 px-2"
        onClick={() => onNavigate("/")}
      >
        <Home className="h-4 w-4" />
      </Button>

      {segments.map((segment, index) => {
        const path = "/" + segments.slice(0, index + 1).join("/");
        return (
          <div key={path} className="flex items-center">
            <ChevronRight className="h-4 w-4 text-gray-500" />
            <Button
              variant="ghost"
              size="sm"
              className="h-8 px-2"
              onClick={() => onNavigate(path)}
            >
              {segment}
            </Button>
          </div>
        );
      })}
    </div>
  );
}

================
File: src/app/components/file-picker/file-explorer.tsx
================
import { FileList } from "./file-list";
import { LoadingSkeleton } from "../shared/loading-skeleton";
import { ErrorMessage } from "../shared/error-message";
import { FileItem } from "@/app/lib/types/file";

interface FileExplorerProps {
  files: FileItem[];
  selectedFiles: string[];
  onFileSelect: (fileId: string) => void;
  onFolderOpen: (resourceId: string, path: string) => void;
  isLoading: boolean;
  error?: string;
}

export function FileExplorer({
  files,
  selectedFiles,
  onFileSelect,
  onFolderOpen,
  isLoading,
  error,
}: FileExplorerProps) {
  if (error) {
    return <ErrorMessage message={error} />;
  }

  if (isLoading) {
    return <LoadingSkeleton />;
  }

  return (
    <div className="min-h-[400px]">
      <FileList
        files={files}
        selectedFiles={selectedFiles}
        onFileSelect={onFileSelect}
        onFolderOpen={onFolderOpen}
      />
    </div>
  );
}

================
File: src/app/components/file-picker/file-item.tsx
================
import { memo } from "react";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { FileIcon, FolderIcon } from "lucide-react";

interface FileItemProps {
  id: string;
  name: string;
  type: "file" | "directory";
  path: string;
  isSelected: boolean;
  isIndexed: boolean;
  metadata?: {
    size?: number;
    modifiedDate?: string;
    type?: string;
  };
  onSelect: () => void;
  onOpen?: () => void;
  onIndex: () => void;
  onDeindex: () => void;
}

export const FileItem = memo(function FileItem({
  name,
  type,
  isSelected,
  isIndexed,
  onSelect,
  onOpen,
  onDeindex,
  onIndex,
}: FileItemProps) {
  const Icon = type === "directory" ? FolderIcon : FileIcon;

  const handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (onOpen) {
      e.preventDefault();
      onOpen();
    }
  };

  return (
    <div
      className={`flex items-center p-2 rounded-lg gap-3 hover:bg-gray-100 dark:hover:bg-gray-800 ${
        isSelected ? "bg-gray-50 dark:bg-gray-900" : ""
      }`}
      onDoubleClick={handleDoubleClick}
    >
      <Checkbox checked={isSelected} onCheckedChange={() => onSelect()} />
      <Icon className="h-4 w-4 text-gray-500" />
      <span className="flex-grow truncate">{name}</span>
      {type === "file" && (
        <Button
          variant={isIndexed ? "outline" : "secondary"}
          size="sm"
          onClick={isIndexed ? onDeindex : onIndex}
        >
          {isIndexed ? "Indexed" : "Index"}
        </Button>
      )}
    </div>
  );
});

================
File: src/app/components/file-picker/file-list.tsx
================
import { FileItem as FileItemType } from "@/app/lib/types/file";
import { FileItem } from "./file-item";

interface FileListProps {
  files: FileItemType[];
  selectedFiles: string[];
  onFileSelect: (fileId: string) => void;
  onFolderOpen: (resourceId: string, path: string) => void;
}

export function FileList({
  files,
  selectedFiles,
  onFileSelect,
  onFolderOpen,
}: FileListProps) {
  if (files.length === 0) {
    return (
      <div className="flex items-center justify-center h-40 text-gray-500">
        No files found
      </div>
    );
  }

  return (
    <div className="space-y-1">
      {files.map((file) => (
        <FileItem
          key={file.resource_id}
          id={file.resource_id}
          name={file.name}
          type={file.inode_type}
          path={file.inode_path.path}
          isSelected={selectedFiles.includes(file.resource_id)}
          isIndexed={file.status === "indexed"}
          metadata={file.metadata}
          onSelect={() => onFileSelect(file.resource_id)}
          onOpen={
            file.inode_type === "directory"
              ? () => onFolderOpen(file.resource_id, file.inode_path.path)
              : undefined
          }
          onIndex={() => console.log("Index:", file.resource_id)}
          onDeindex={() => console.log("Deindex:", file.resource_id)}
        />
      ))}
    </div>
  );
}

================
File: src/app/components/file-picker/file-picker.tsx
================
import { useCallback } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { FileExplorer } from "./file-explorer";
import { BreadcrumbNavigation } from "./breadcrumb-navigation";
import { ErrorBoundary } from "../shared/error-boundary";
import { useConnection } from "@/app/hooks/api/use-connection";
import { useResources } from "@/app/hooks/api/use-resources";
import { useNavigation } from "@/app/hooks/ui/use-navigation";
import { useFileSelection } from "@/app/hooks/ui/use-file-selection";
import { useKeyboardSelection } from "@/app/hooks/ui/use-keyboard-selection";

export function FilePicker() {
  const { connection } = useConnection();
  const {
    currentPath,
    currentResourceId,
    navigateToFolder,
    navigateBack,
    navigateForward,
    canGoBack,
    canGoForward,
  } = useNavigation();

  const { resources, isLoading, error } = useResources({
    connectionId: connection?.connection_id || "",
    resourceId: currentResourceId,
  });

  const {
    selectedFiles,
    toggleSelection,
    selectRange,
    clearSelection,
    selectAll,
  } = useFileSelection();

  // Set up keyboard selection
  useKeyboardSelection({
    files: resources || [],
    selectedFiles,
    onToggleSelection: toggleSelection,
    onSelectRange: selectRange,
    onSelectAll: selectAll,
    onClearSelection: clearSelection,
  });

  const handleFileSelect = useCallback(
    (fileId: string, e: React.MouseEvent) => {
      toggleSelection(fileId, e.metaKey || e.ctrlKey || e.shiftKey);
    },
    [toggleSelection]
  );

  const handleFolderOpen = useCallback(
    (path: string, resourceId: string) => {
      clearSelection(); // Clear selection when navigating
      navigateToFolder(path, resourceId);
    },
    [navigateToFolder, clearSelection]
  );

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <div className="border-b border-gray-200 dark:border-gray-800">
        <div className="flex items-center gap-2 p-2">
          <Button
            variant="ghost"
            size="icon"
            onClick={navigateBack}
            disabled={!canGoBack}
          >
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            onClick={navigateForward}
            disabled={!canGoForward}
          >
            <ChevronRight className="h-4 w-4" />
          </Button>
          <BreadcrumbNavigation
            currentPath={currentPath}
            onNavigate={(path) => navigateToFolder(path)}
          />
        </div>
      </div>

      <ErrorBoundary>
        <div className="p-4">
          <FileExplorer
            files={resources}
            selectedFiles={selectedFiles}
            onFileSelect={handleFileSelect}
            onFolderOpen={(resourceId, path) =>
              handleFolderOpen(path, resourceId)
            }
            isLoading={isLoading}
            error={error?.message}
          />
        </div>
      </ErrorBoundary>
    </Card>
  );
}

================
File: src/app/components/shared/error-boundary.tsx
================
import { Component, ErrorInfo, ReactNode } from "react";

interface Props {
  children?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Uncaught error:", error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return (
        <div className="p-4 text-red-500">
          <h2>Something went wrong.</h2>
          <details className="mt-2 text-sm">
            <summary>Error details</summary>
            <pre className="mt-2 whitespace-pre-wrap">
              {this.state.error?.message}
            </pre>
          </details>
        </div>
      );
    }

    return this.props.children;
  }
}

================
File: src/app/components/shared/error-message.tsx
================
interface ErrorMessageProps {
  message: string;
}

export function ErrorMessage({ message }: ErrorMessageProps) {
  return (
    <div className="p-4 text-red-500 bg-red-50 dark:bg-red-900/10 rounded-lg">
      <p>{message}</p>
    </div>
  );
}

================
File: src/app/components/shared/loading-skeleton.tsx
================
export function LoadingSkeleton() {
  return (
    <div className="space-y-2">
      {[...Array(5)].map((_, i) => (
        <div key={i} className="flex items-center p-2 gap-3 animate-pulse">
          <div className="h-4 w-4 bg-gray-200 dark:bg-gray-700 rounded" />
          <div className="h-4 flex-grow bg-gray-200 dark:bg-gray-700 rounded" />
          <div className="h-4 w-16 bg-gray-200 dark:bg-gray-700 rounded" />
        </div>
      ))}
    </div>
  );
}

================
File: src/app/hooks/api/use-auth.ts
================
import { useState, useCallback } from "react";
import { apiClient } from "@/app/lib/api/client";

export function useAuth() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const login = useCallback(async (email: string, password: string) => {
    setIsLoading(true);
    setError(null);
    try {
      await apiClient.login(email, password);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Authentication failed");
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, []);

  return { login, isLoading, error };
}

================
File: src/app/hooks/api/use-connection.ts
================
import useSWR from "swr";
import { apiClient } from "@/app/lib/api/client";
import { endpoints } from "@/app/lib/api/endpoint";
import { Connection } from "@/app/lib/types/api";

export function useConnection() {
  const { data, error, isLoading } = useSWR<Connection[]>(
    endpoints.connection.list(),
    (url: string) => apiClient.fetchWithAuth(url)
  );

  return {
    connection: data?.[0],
    error,
    isLoading,
  };
}

================
File: src/app/hooks/api/use-knowledge-base.ts
================
import useSWR from "swr";
import { apiClient } from "@/app/lib/api/client";
import { endpoints } from "@/app/lib/api/endpoint";

interface CreateKBParams {
  connectionId: string;
  connectionSourceIds: string[];
  name: string;
  description?: string;
}

export function useKnowledgeBase(kbId?: string) {
  const { data: orgData } = useSWR(endpoints.organization.current, (url) =>
    apiClient.fetchWithAuth(url)
  );

  const orgId = orgData?.org_id;

  const createKnowledgeBase = async ({
    connectionId,
    connectionSourceIds,
    name,
    description,
  }: CreateKBParams) => {
    const response = await apiClient.fetchWithAuth(
      endpoints.knowledgeBase.create,
      {
        method: "POST",
        body: JSON.stringify({
          connection_id: connectionId,
          connection_source_ids: connectionSourceIds,
          name,
          description,
          indexing_params: {
            ocr: false,
            unstructured: true,
            embedding_params: {
              embedding_model: "text-embedding-ada-002",
              api_key: null,
            },
            chunker_params: {
              chunk_size: 1500,
              chunk_overlap: 500,
              chunker: "sentence",
            },
          },
        }),
      }
    );
    return response;
  };

  const syncKnowledgeBase = async (knowledgeBaseId: string) => {
    if (!orgId) throw new Error("Organization ID not found");

    return apiClient.fetchWithAuth(
      endpoints.knowledgeBase.sync(knowledgeBaseId, orgId),
      { method: "GET" }
    );
  };

  const {
    data: resources,
    error,
    isLoading,
  } = useSWR(kbId ? endpoints.knowledgeBase.children(kbId) : null, (url) =>
    apiClient.fetchWithAuth(url)
  );

  return {
    resources,
    error,
    isLoading,
    createKnowledgeBase,
    syncKnowledgeBase,
  };
}

================
File: src/app/hooks/api/use-resources.ts
================
import useSWR from "swr";
import { apiClient } from "@/app/lib/api/client";
import { endpoints } from "@/app/lib/api/endpoint";
import { FileItem } from "@/app/lib/types/file";

interface UseResourcesProps {
  connectionId: string;
  resourceId?: string;
}

export function useResources({ connectionId, resourceId }: UseResourcesProps) {
  const { data, error, isLoading, mutate } = useSWR<FileItem[]>(
    connectionId
      ? endpoints.connection.children(connectionId, resourceId)
      : null,
    (url: string) => apiClient.fetchWithAuth(url)
  );

  return {
    resources: data || [],
    error,
    isLoading,
    refreshResources: mutate,
  };
}

================
File: src/app/hooks/ui/use-file-selection.ts
================
import { useState, useCallback } from "react";
import { FileItem } from "@/app/lib/types/file";

interface UseFileSelectionProps {
  initialSelection?: string[];
}

export function useFileSelection({
  initialSelection = [],
}: UseFileSelectionProps = {}) {
  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(
    new Set(initialSelection)
  );

  const toggleSelection = useCallback(
    (fileId: string, multiSelect: boolean) => {
      setSelectedFiles((prev) => {
        const newSelection = new Set(prev);
        if (!multiSelect) {
          // If not multi-selecting, clear other selections
          newSelection.clear();
        }
        if (newSelection.has(fileId)) {
          newSelection.delete(fileId);
        } else {
          newSelection.add(fileId);
        }
        return newSelection;
      });
    },
    []
  );

  const selectRange = useCallback(
    (files: FileItem[], startId: string, endId: string) => {
      const fileIds = files.map((f) => f.resource_id);
      const startIndex = fileIds.indexOf(startId);
      const endIndex = fileIds.indexOf(endId);

      if (startIndex === -1 || endIndex === -1) return;

      const start = Math.min(startIndex, endIndex);
      const end = Math.max(startIndex, endIndex);

      const rangeIds = fileIds.slice(start, end + 1);
      setSelectedFiles(new Set(rangeIds));
    },
    []
  );

  const clearSelection = useCallback(() => {
    setSelectedFiles(new Set());
  }, []);

  const selectAll = useCallback((files: FileItem[]) => {
    setSelectedFiles(new Set(files.map((f) => f.resource_id)));
  }, []);

  return {
    selectedFiles: Array.from(selectedFiles),
    toggleSelection,
    selectRange,
    clearSelection,
    selectAll,
    isSelected: (fileId: string) => selectedFiles.has(fileId),
  };
}

================
File: src/app/hooks/ui/use-keyboard-selection.ts
================
import { useEffect, useRef } from "react";
import { FileItem } from "@/app/lib/types/file";

interface UseKeyboardSelectionProps {
  files: FileItem[];
  selectedFiles: string[];
  onToggleSelection: (fileId: string, multiSelect: boolean) => void;
  onSelectRange: (files: FileItem[], startId: string, endId: string) => void;
  onSelectAll: (files: FileItem[]) => void;
  onClearSelection: () => void;
}

export function useKeyboardSelection({
  files,
  selectedFiles,
  onToggleSelection,
  onSelectRange,
  onSelectAll,
  onClearSelection,
}: UseKeyboardSelectionProps) {
  const lastSelectedRef = useRef<string | null>(null);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Ignore key events when typing in input fields
      if (
        e.target instanceof HTMLInputElement ||
        e.target instanceof HTMLTextAreaElement
      ) {
        return;
      }

      // Command/Ctrl + A to select all
      if ((e.metaKey || e.ctrlKey) && e.key === "a") {
        e.preventDefault();
        onSelectAll(files);
        return;
      }

      // Escape to clear selection
      if (e.key === "Escape") {
        onClearSelection();
        return;
      }

      // Handle shift + click for range selection
      if (e.shiftKey && lastSelectedRef.current && selectedFiles.length > 0) {
        const lastSelected = lastSelectedRef.current;
        const currentSelected = selectedFiles[selectedFiles.length - 1];
        onSelectRange(files, lastSelected, currentSelected);
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [files, selectedFiles, onSelectAll, onClearSelection, onSelectRange]);

  // Track last selected item for range selection
  useEffect(() => {
    if (selectedFiles.length > 0) {
      lastSelectedRef.current = selectedFiles[selectedFiles.length - 1];
    }
  }, [selectedFiles]);

  return {
    lastSelected: lastSelectedRef.current,
  };
}

================
File: src/app/hooks/ui/use-navigation.ts
================
import { useState, useCallback } from "react";

interface NavigationState {
  currentPath: string;
  currentResourceId?: string;
  pathHistory: { path: string; resourceId?: string }[];
  historyIndex: number;
}

export function useNavigation() {
  const [state, setState] = useState<NavigationState>({
    currentPath: "/",
    pathHistory: [{ path: "/" }],
    historyIndex: 0,
  });

  const navigateToFolder = useCallback((path: string, resourceId?: string) => {
    setState((prev) => {
      const newHistory = prev.pathHistory.slice(0, prev.historyIndex + 1);
      return {
        currentPath: path,
        currentResourceId: resourceId,
        pathHistory: [...newHistory, { path, resourceId }],
        historyIndex: newHistory.length,
      };
    });
  }, []);

  const navigateBack = useCallback(() => {
    setState((prev) => {
      if (prev.historyIndex <= 0) return prev;
      const newIndex = prev.historyIndex - 1;
      const { path, resourceId } = prev.pathHistory[newIndex];
      return {
        ...prev,
        currentPath: path,
        currentResourceId: resourceId,
        historyIndex: newIndex,
      };
    });
  }, []);

  const navigateForward = useCallback(() => {
    setState((prev) => {
      if (prev.historyIndex >= prev.pathHistory.length - 1) return prev;
      const newIndex = prev.historyIndex + 1;
      const { path, resourceId } = prev.pathHistory[newIndex];
      return {
        ...prev,
        currentPath: path,
        currentResourceId: resourceId,
        historyIndex: newIndex,
      };
    });
  }, []);

  const canGoBack = state.historyIndex > 0;
  const canGoForward = state.historyIndex < state.pathHistory.length - 1;

  return {
    currentPath: state.currentPath,
    currentResourceId: state.currentResourceId,
    navigateToFolder,
    navigateBack,
    navigateForward,
    canGoBack,
    canGoForward,
  };
}

================
File: src/app/lib/api/client.ts
================
import { AuthResponse } from "../types/api";

const API_URL = "https://api.stack-ai.com";
const AUTH_URL = "https://sb.stack-ai.com";
const ANON_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZic3VhZGZxaGtseG9rbWxodHNkIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NzM0NTg5ODAsImV4cCI6MTk4OTAzNDk4MH0.Xjry9m7oc42_MsLRc1bZhTTzip3srDjJ6fJMkwhXQ9s";

class ApiClient {
  private accessToken: string | null = null;

  async login(email: string, password: string): Promise<string> {
    const response = await fetch(
      `${AUTH_URL}/auth/v1/token?grant_type=password`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ApiKey: ANON_KEY,
        },
        body: JSON.stringify({
          email,
          password,
          gotrue_meta_security: {},
        }),
      }
    );

    if (!response.ok) {
      throw new Error("Authentication failed");
    }

    const data: AuthResponse = await response.json();
    this.accessToken = data.access_token;
    return data.access_token;
  }

  async fetchWithAuth(endpoint: string, options: RequestInit = {}) {
    if (!this.accessToken) {
      throw new Error("Not authenticated");
    }

    const response = await fetch(`${API_URL}${endpoint}`, {
      ...options,
      headers: {
        ...options.headers,
        Authorization: `Bearer ${this.accessToken}`,
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      throw new Error(`API request failed: ${response.statusText}`);
    }

    return response.json();
  }
}

export const apiClient = new ApiClient();

================
File: src/app/lib/api/endpoint.ts
================
export const endpoints = {
  connection: {
    list: () => "/connections?connection_provider=gdrive&limit=1",
    resources: (connectionId: string) =>
      `/connections/${connectionId}/resources`,
    children: (connectionId: string, resourceId?: string) => {
      const base = `/connections/${connectionId}/resources/children`;
      return resourceId ? `${base}?resource_id=${resourceId}` : base;
    },
  },
  knowledgeBase: {
    create: "/knowledge_bases",
    sync: (kbId: string, orgId: string) =>
      `/knowledge_bases/sync/trigger/${kbId}/${orgId}`,
    resources: (kbId: string) => `/knowledge_bases/${kbId}/resources`,
    children: (kbId: string, path: string = "/") =>
      `/knowledge_bases/${kbId}/resources/children?resource_path=${encodeURIComponent(
        path
      )}`,
  },
  organization: {
    current: "/organizations/me/current",
  },
};

================
File: src/app/lib/types/api.ts
================
export interface AuthResponse {
  access_token: string;
}

export interface Connection {
  connection_id: string;
  name: string;
  created_at: string;
  updated_at: string;
  connection_provider: string;
}

export interface ApiError {
  message: string;
  status: number;
}

================
File: src/app/lib/types/file.ts
================
export interface FileItem {
  resource_id: string;
  name: string;
  inode_type: "file" | "directory";
  inode_path: {
    path: string;
  };
  metadata?: {
    size?: number;
    modifiedDate?: string;
    type?: string;
  };
  status?: "indexed" | "pending" | "not-indexed";
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import Image from "next/image";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
              src/app/page.tsx
            </code>
            .
          </li>
          <li>Save and see your changes instantly.</li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: DESIGNDOC.md
================
# Stack AI File Picker - Implementation Guide

## Project Structure

```
src/
├── app/
│   ├── layout.tsx
│   └── page.tsx
├── components/
│   ├── ui/               # Shadcn components
│   │   ├── button.tsx
│   │   ├── checkbox.tsx
│   │   └── ...
│   ├── file-picker/     # Our main components
│   │   ├── file-picker.tsx
│   │   ├── file-explorer.tsx
│   │   ├── file-list.tsx
│   │   ├── file-item.tsx
│   │   ├── breadcrumb-navigation.tsx
│   │   ├── toolbar/
│   │   │   ├── index.tsx
│   │   │   ├── search-bar.tsx
│   │   │   ├── sort-dropdown.tsx
│   │   │   └── filter-dropdown.tsx
│   │   └── status-indicator.tsx
│   └── shared/          # Shared components
│       ├── error-boundary.tsx
│       ├── loading-skeleton.tsx
│       └── error-message.tsx
├── hooks/
│   ├── api/            # API related hooks
│   │   ├── use-connection.ts
│   │   ├── use-resources.ts
│   │   └── use-knowledge-base.ts
│   └── ui/            # UI related hooks
│       ├── use-file-selection.ts
│       ├── use-navigation.ts
│       └── use-sort-filter.ts
├── lib/
│   ├── api/           # API utilities
│   │   ├── client.ts
│   │   └── endpoints.ts
│   ├── utils/         # Helper functions
│   │   ├── file-utils.ts
│   │   └── sort-utils.ts
│   └── types/         # TypeScript types
│       ├── api.ts
│       └── file.ts
├── store/             # Zustand store
│   ├── slices/
│   │   ├── file-slice.ts
│   │   └── ui-slice.ts
│   └── index.ts
└── styles/
    └── globals.css
```

## Phase 1: Core Structure and Basic Navigation

### Step 1: Base Components Setup

1. Create FilePicker (Main Container)

   - This will be your page-level component
   - Initialize basic layout structure
   - Set up error boundaries

2. Create FileExplorer Component

   - Props:
     - files: FileItem[]
     - selectedFiles: string[]
     - onFileSelect: (fileId: string) => void
     - onFolderOpen: (folderId: string) => void
     - isLoading: boolean
     - error?: string
   - Initially render just a container for FileList

3. Create FileList Component

   - Props:
     - files: FileItem[]
     - selectedFiles: string[]
     - onFileSelect: (fileId: string) => void
     - onFolderOpen: (folderId: string) => void
   - Implement basic list structure

4. Create FileItem Component
   - Props:
     - id: string
     - name: string
     - type: 'file' | 'folder'
     - isSelected: boolean
     - isIndexed: boolean
     - metadata: { size?, modifiedDate, type }
     - onSelect: () => void
     - onOpen?: () => void
     - onIndex: () => void
     - onDeindex: () => void
   - Implement basic file/folder display

### Step 2: API Integration Foundation

1. Create API Hooks

   - useConnection() for connection management
   - useResources(connectionId, path) for file listing
   - useKnowledgeBase() for KB operations

2. Implement Basic Error Handling

   - Create error types and handlers
   - Implement retry logic
   - Add error states to components

3. Add Loading States
   - Create loading indicators
   - Implement skeleton loading states
   - Add loading state handling to components

## Phase 2: Navigation and Selection

### Step 3: Navigation Implementation

1. Create BreadcrumbNavigation Component

   - Props:
     - currentPath: string
     - onNavigate: (path: string) => void
     - pathHistory: string[]
   - Implement path display
   - Add click navigation

2. Enhance FileExplorer

   - Add folder navigation logic
   - Implement history tracking
   - Add back/forward navigation

3. Update FileItem for Navigation
   - Add folder click handling
   - Implement double-click navigation
   - Add keyboard navigation support

### Step 4: Selection Mechanism

1. Implement Selection Logic

   - Add selection state management
   - Implement single/multi-select
   - Add keyboard selection support

2. Update FileItem Selection UI
   - Add selection indicators
   - Implement selection styling
   - Add selection checkboxes

## Phase 3: Indexing and Status

### Step 5: Indexing Implementation

1. Create StatusIndicator Component

   - Props:
     - status: 'indexed' | 'pending' | 'not-indexed'
     - onStatusChange: (newStatus: string) => void
   - Implement status display
   - Add status transitions

2. Enhance FileItem with Indexing

   - Add index/deindex controls
   - Implement status updates
   - Add indexing feedback

3. Implement Knowledge Base Integration
   - Add KB creation flow
   - Implement sync functionality
   - Add progress tracking

## Phase 4: Search, Sort, and Filter

### Step 6: Toolbar Implementation

1. Create Toolbar Component

   - Props:
     - onSearch: (searchTerm: string) => void
     - onSort: (sortType: 'name' | 'date') => void
     - onFilter: (filterType: string) => void
     - currentSort: string
     - currentFilter: string
   - Implement basic layout

2. Create SearchBar Component

   - Add search input
   - Implement search logic
   - Add search results handling

3. Implement Sort Functionality

   - Add sort dropdown
   - Implement sort logic
   - Add sort indicators

4. Add Filter Functionality
   - Create filter controls
   - Implement filter logic
   - Add filter indicators

## Phase 5: Enhancement and Polish

### Step 7: Performance Optimization

1. Implement List Virtualization

   - Add virtual scrolling
   - Optimize large lists
   - Add scroll position recovery

2. Add Caching Layer

   - Implement data caching
   - Add cache invalidation
   - Optimize refetching

3. Add Prefetching
   - Implement hover prefetch
   - Add background loading
   - Optimize navigation

### Step 8: UI Polish

1. Enhance Visual Feedback

   - Add hover states
   - Implement transitions
   - Polish loading states

2. Add Keyboard Shortcuts

   - Implement navigation shortcuts
   - Add selection shortcuts
   - Create shortcut help

3. Improve Error UX
   - Enhance error messages
   - Add recovery options
   - Implement retry mechanisms

## Testing Checkpoints

After each phase, ensure to test:

1. Core functionality works
2. Error states are handled
3. Loading states look good
4. Performance is acceptable
5. UI is responsive
6. Browser compatibility

## State Management Checkpoints

For each component, verify:

1. Props are properly typed
2. State updates are optimized
3. Side effects are cleaned up
4. Event handlers are memoized
5. Callbacks are stable

## Error Handling Checkpoints

For each feature, verify:

1. API errors are caught
2. User errors are handled
3. Network issues are managed
4. Recovery paths work
5. User feedback is clear

## Performance Checkpoints

For each implementation:

1. Check render cycles
2. Verify memoization
3. Test with large datasets
4. Measure load times
5. Verify CLS scores

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "stack-ai-file-picker",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-slot": "^1.1.1",
    "@tanstack/react-query": "^5.62.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.469.0",
    "next": "15.1.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "swr": "^2.2.5",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "zustand": "^5.0.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.2",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
